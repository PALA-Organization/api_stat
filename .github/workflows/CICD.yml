# Workflow of JEE-Server

name: CI/CD

on:
  push:
    paths-ignore:
      - '.github/**'
  pull_request:
    paths-ignore:
      - '.github/**'

jobs:
  test:
    runs-on: self-hosted
    steps:
      - name: Checkout repository access
        uses: actions/checkout@v2 # Check if the workflow can access our repo

      - name: Set up Java 11 environment
        uses: actions/setup-java@v1 # Sets up a Java environment
        with:
          java-version: 11

      - name: Test with Maven
        run: mvn test

  build-dev:
    needs: test
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    runs-on: self-hosted
    steps:
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Build Docker image
        run: docker build . --tag jee-api-stat:dev

  deploy-dev:
    needs: build-dev
    runs-on: self-hosted
    steps:
      - name: Stop previous Docker image
        run:  (docker stop jee-api-stat || echo "Container already stopped") && (docker rm jee-api-stat || echo "Image already removed")

      - name: Launch new Docker image
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY}}
          AUTHENTIFICATION_DATABASE: ${{ secrets.DEV_MONGO_AUTHENTIFICATION_DATABASE }}
          DB_USERNAME: ${{ secrets.DEV_MONGO_USERNAME }}
          DB_PASSWORD: ${{ secrets.DEV_MONGO_PASSWORD }}
          DB_NAME: ${{ secrets.DEV_MONGO_DATABASE }}
          DB_PORT: ${{ secrets.DEV_MONGO_PORT }}
          DB_HOST: ${{ secrets.DEV_MONGO_HOST }}
          API_ACCOUNTING_BASE_URL: ${{ secrets.DEV_API_ACCOUNTING_URL }}
        run: |
          docker run -d -p ${{ secrets.DEV_PORT }}:8080 -e SECRET_KEY -e AUTHENTIFICATION_DATABASE -e DB_USERNAME -e DB_PASSWORD -e DB_NAME -e DB_PORT -e DB_HOST -e API_ACCOUNTING_BASE_URL --name "jee-api-stat" jee-api-stat:dev
        
  deploy-prod:
    needs: test
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: self-hosted
    steps: 
      - name: Initliaze AWS env
        run: eb use ${{ secrets.AWS_ENVIRONMENT_NAME }}
        
      - name: Set env vars
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          AUTHENTIFICATION_DATABASE: ${{ secrets.PROD_MONGO_AUTHENTIFICATION_DATABASE }}
          DB_USERNAME: ${{ secrets.PROD_MONGO_USERNAME }}
          DB_PASSWORD: ${{ secrets.PROD_MONGO_PASSWORD }}
          DB_NAME: ${{ secrets.PROD_MONGO_DATABASE }}
          DB_PORT: ${{ secrets.PROD_MONGO_PORT }}
          DB_HOST: ${{ secrets.PROD_MONGO_HOST }}
          API_ACCOUNTING_BASE_URL: ${{ secrets.PROD_API_ACCOUNTING_URL }}
        run: eb setenv SECRET_KEY=$SECRET_KEY AUTHENTIFICATION_DATABASE=$AUTHENTIFICATION_DATABASE DB_USERNAME=$DB_USERNAME DB_PASSWORD=$DB_PASSWORD DB_NAME=$DB_NAME DB_PORT=$DB_PORT DB_HOST=$DB_HOST API_ACCOUNTING_BASE_URL=$API_ACCOUNTING_BASE_URL
        
      - name: Deploy on EB
        run: eb deploy ${{ secrets.AWS_ENVIRONMENT_NAME }}
